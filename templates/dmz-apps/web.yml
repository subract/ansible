version: "3.7"

networks:
  web:
  db:

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: --providers.docker

    ports:
      - 80:80
      - 443:443

    networks:
      - web

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /ssd/dmz/app/traefik/traefik.yml:/traefik.yml
      - /ssd/dmz/app/traefik/acme.json:/acme.json
      - /etc/localtime:/etc/localtime:ro

    labels:
      traefik.enable: false


  # Enables Traefik to talk to Keycloak for forward authentication
  # https://brianturchyn.net/traefik-forwardauth-support-with-keycloak/
  forward_auth:
    container_name: forward_auth
    image: mesosphere/traefik-forward-auth:latest
    restart: unless-stopped

    depends_on:
      - traefik
      - keycloak

    networks:
      - web

    environment:
      SECRET: ${FORWARD_AUTH_SECRET}
      PROVIDER_URI: https://kc.{{ primary_domain }}/realms/dmz
      CLIENT_ID: traefik
      CLIENT_SECRET: ${FORWARD_AUTH_CLIENT_SECRET}

    labels:
      traefik.enable: true
      traefik.docker.network: doc_web
      traefik.http.services.forward_auth.loadbalancer.server.port: 4181
      traefik.http.routers.forward_auth.entrypoints: https
      traefik.http.routers.forward_auth.tls.certresolver: default
      traefik.http.routers.forward_auth.rule: Path(`/_oauth`)
      traefik.http.routers.forward_auth.middlewares: traefik-forward-auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://forward_auth:4181
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User
      traefik.http.middlewares.traefik-forward-auth.forwardauth.trustForwardHeader: true


  nginx:
    container_name: nginx
    image: nginxinc/nginx-unprivileged
    user: "2020"
    restart: unless-stopped

    depends_on:
      - traefik
      - forward_auth

    volumes:
      - /ssd/dmz/app/nginx:/usr/share/nginx/html:ro

    networks:
      - web
    
    labels:
      traefik.enable: true
      traefik.http.routers.h4.rule: Host(`h4.{{ primary_domain }}`)
      traefik.http.routers.h4.entrypoints: https
      traefik.http.routers.h4.tls.certresolver: default
      # Require keycloak sign-in to access any pages
      traefik.http.routers.h4.middlewares: traefik-forward-auth


  # Google Docs for markdown documents
  hedgedoc:
    image: lscr.io/linuxserver/hedgedoc:latest
    container_name: hedgedoc
    restart: unless-stopped

    depends_on:
      - traefik
      - forward_auth

    environment:
      PUID: 2010
      PGID: 2010
      TZ: {{ timezone }}
      CMD_DOMAIN: hd.{{ primary_domain }}
      CMD_PROTOCOL_USESSL: true
      CMD_ALLOW_ORIGIN: "[hd.{{ primary_domain }}]"
      CMD_ALLOW_ANONYMOUS: false # no guest usage
      CMD_DEFAULT_PERMISSION: limited # default new notes to only viewable by logged-in users
      CMD_EMAIL: false # don't allow signing in with email/password - only Keycloak

      # Keycloak SSO configuration
      CMD_OAUTH2_USER_PROFILE_URL: https://kc.{{ primary_domain }}/realms/dmz/protocol/openid-connect/userinfo
      CMD_OAUTH2_USER_PROFILE_USERNAME_ATTR: preferred_username
      CMD_OAUTH2_USER_PROFILE_DISPLAY_NAME_ATTR: name
      CMD_OAUTH2_USER_PROFILE_EMAIL_ATTR: email
      CMD_OAUTH2_TOKEN_URL: https://kc.{{ primary_domain }}/realms/dmz/protocol/openid-connect/token
      CMD_OAUTH2_AUTHORIZATION_URL: https://kc.{{ primary_domain }}/realms/dmz/protocol/openid-connect/auth
      CMD_OAUTH2_CLIENT_ID: hedgedoc # from Keycloak
      CMD_OAUTH2_CLIENT_SECRET: ${HEDGEDOC_OAUTH2_CLIENT_SECRET} # from Keycloak
      CMD_OAUTH2_PROVIDERNAME: {{ primary_domain }} # display name
      # Per here https://shivering-isles.com/fixing-hedgedoc-profile-info-keycloak-20
      CMD_OAUTH2_SCOPE: "openid email profile"

    volumes:
      - /ssd/dmz/app/hedgedoc:/config

    networks:
      - web

    labels:
      traefik.enable: true
      traefik.http.routers.hd.rule: Host(`hd.{{ primary_domain }}`)
      traefik.http.routers.hd.entrypoints: https
      traefik.http.routers.hd.tls.certresolver: default
      traefik.http.services.hd.loadbalancer.server.port: 3000
      # Require keycloak sign-in to access any pages
      traefik.http.routers.hd.middlewares: traefik-forward-auth


  mariadb:
    container_name: mariadb
    image: mariadb:10
    restart: unless-stopped
    user: 2010:2010

    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
    
    volumes:
      - /ssd/dmz/app/mariadb:/var/lib/mysql

    networks:
      - db

    labels:
      traefik.enable: false


  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    restart: unless-stopped
    command: start --log=console,gelf --log-gelf-host=10.0.0.5 --log-gelf-port=12201

    # Since Keycloak can send its own logs to our log server, we don't need it
    # to also send logs there via Docker's default GELF facility
    logging:
      driver: json-file

    depends_on:
      - mariadb

    environment:
      KC_HOSTNAME: kc.{{ primary_domain }} 
      KC_PROXY: edge
      KC_DB: mariadb
      KC_DB_URL_HOST: mariadb
      KC_DB_URL_PORT: 3306
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      # Not needed after initial setup
      # KEYCLOAK_ADMIN: 
      # KEYCLOAK_ADMIN_PASSWORD:

    networks:
      - web
      - db

    labels:
      traefik.enable: true

      # Create service named "kc-service" attached to port 8080
      traefik.http.services.kc-service.loadbalancer.server.port: 8080

      # Create a basic router for Keycloak
      traefik.http.routers.kc.rule: Host(`kc.{{ primary_domain }}`)
      traefik.http.routers.kc.service: kc-service
      traefik.http.routers.kc.entrypoints: https
      traefik.http.routers.kc.tls.certresolver: default
          
      # Create an additional router for the admin interface
      # Example here: https://www.reddit.com/r/Traefik/comments/hpsrx9/is_it_possible_to_configure_whitelist_for/
      traefik.http.routers.kc-admin.rule: (Host(`kc.{{ primary_domain }}`) && PathPrefix(`/admin`,`/metrics`,`/health`))
      traefik.http.routers.kc-admin.service: kc-service
      traefik.http.routers.kc-admin.entrypoints: https
      traefik.http.routers.kc-admin.tls.certresolver: default
          
      # Apply an IP-based whitelist to the admin router, preventing internet access
      traefik.http.routers.kc-admin.middlewares: kc-admin-ipwhitelist
      traefik.http.middlewares.kc-admin-ipwhitelist.ipwhitelist.sourcerange: "10.0.0.0/8"


  directus:
    container_name: directus
    image: directus/directus:latest
    restart: unless-stopped
    ports:
      - 8055:8055

    volumes:
      - /ssd/dmz/app/directus:/directus/database

    networks:
      - web
      
    environment:
      PUBLIC_URL: https://dr.{{ secondary_domain }}/
      TELEMETRY: false
      KEY: ${DIRECTUS_KEY}
      SECRET: ${DIRECTUS_SECRET}
      DB_CLIENT: sqlite3
      DB_FILENAME: ./database/data.db
      
      # SSO with Keycloak
      AUTH_DISABLE_DEFAULT: true
      AUTH_PROVIDERS: keycloak
      AUTH_KEYCLOAK_DRIVER: openid
      AUTH_KEYCLOAK_CLIENT_ID: directus
      AUTH_KEYCLOAK_CLIENT_SECRET: ${DIRECTUS_AUTH_KEYCLOAK_CLIENT_SECRET}
      AUTH_KEYCLOAK_ISSUER_URL: https://kc.{{ primary_domain }}/realms/dmz/.well-known/openid-configuration
      AUTH_KEYCLOAK_IDENTIFIER_KEY: email

    labels:
      traefik.enable: true
      traefik.http.routers.dr.rule: Host(`dr.{{ secondary_domain }}`)
      traefik.http.routers.dr.entrypoints: https
      traefik.http.routers.dr.tls.certresolver: default
      traefik.http.services.dr.loadbalancer.server.port: 8055

      # # Require keycloak sign-in to access any pages
      traefik.http.routers.dr.middlewares: traefik-forward-auth