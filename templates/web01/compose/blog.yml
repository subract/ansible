networks:
  web:
  db:

services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: --providers.docker

    ports:
      - 80:80
      - 443:443

    networks:
      - web

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/traefik/traefik.yml:/traefik.yml
      - /opt/traefik/dynamic_conf.yml:/dynamic_conf.yml
      - /opt/traefik/acme.json:/acme.json
      - /etc/localtime:/etc/localtime:ro

    labels:
      traefik.enable: false

  # directus:
  #   container_name: directus
  #   image: directus/directus:latest
  #   restart: unless-stopped

  #   env_file:
  #     - blog.env

  #   volumes:
  #     - /opt/directus:/directus/database

  #   networks:
  #     - web
      
  #   environment:
  #     PUBLIC_URL: https://dr.{{ secondary_domain }}/
  #     TELEMETRY: false
  #     KEY: ${DIRECTUS_KEY}
  #     SECRET: ${DIRECTUS_SECRET}
  #     DB_CLIENT: sqlite3
  #     DB_FILENAME: ./database/data.db

  #   labels:
  #     traefik.enable: true
  #     # Create service
  #     traefik.http.services.dr-service.loadbalancer.server.port: 8055
  #     # No Keycloak needed for general APi access
  #     traefik.http.routers.dr.rule: Host(`dr.{{ secondary_domain }}`)
  #     traefik.http.routers.dr.service: dr-service
  #     traefik.http.routers.dr.tls.certresolver: default

  ghost:
    container_name: ghost
    image: ghost:5
    restart: unless-stopped
    env_file:
      - blog.env

    networks:
      - web

    volumes:
      - /opt/ghost:/var/lib/ghost/content

    environment:
      url: https://{{ secondary_domain }}

      # In dev, a SQLite DB is acceptable
      database__connection__filename: /var/lib/ghost/content/data/ghost.db
      NODE_ENV: development

      # Mail
      mail__transport: SMTP
      mail__from: support@{{ secondary_domain }}
      mail__options__host: smtp.mailgun.org
      mail__options__port: 465
      mail__options__secure: true
      mail__options__auth__user: postmaster@mail.{{ secondary_domain }}

    labels:
      traefik.enable: true
      traefik.http.routers.gh.rule: Host(`{{ secondary_domain }}`)
      traefik.http.routers.gh.tls.certresolver: default

  nginx:
    container_name: nginx
    image: nginxinc/nginx-unprivileged
    user: "2020"
    restart: unless-stopped

    depends_on:
      - traefik

    volumes:
      - /opt/nginx:/usr/share/nginx/html:ro

    networks:
      - web
    
    labels:
      traefik.enable: true
      traefik.http.routers.ng.rule: (Host(`{{ secondary_domain }}`) && PathPrefix(`/static`))
      traefik.http.routers.ng.tls.certresolver: default