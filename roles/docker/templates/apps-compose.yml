version: "3.7"


networks:
  web:
  mqtt:
  db:
  drone:


services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command: --api.insecure=true --providers.docker

    ports:
      - 80:80
      - 443:443

    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - CF_ZONE_API_TOKEN=${CF_ZONE_API_TOKEN}

    networks:
      - web

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /ssd/app/traefik/traefik.yml:/traefik.yml
      - /ssd/app/traefik/dynamic_conf.yml:/dynamic_conf.yml
      - /ssd/app/traefik/acme.json:/acme.json
      - /etc/localtime:/etc/localtime:ro

    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`tr.{{ domain }}`)
      - traefik.http.routers.api.entrypoints=https
      - traefik.http.routers.api.tls.certresolver=default
      - traefik.http.routers.api.service=api@internal
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USERS}


  nextcloud:
    container_name: nextcloud
    image: linuxserver/nextcloud:latest
    restart: unless-stopped
    depends_on:
      - mariadb

    volumes:
      - /hdd/enc/app/nextcloud/config:/config
      - /hdd/enc/app/nextcloud/data:/data

    environment:
      - PUID=1001
      - PGID=1001

    networks:
      - web
      - db

    labels:
      - traefik.enable=true
      - traefik.http.routers.nc.rule=Host(`nc.{{ domain }}`)
      - traefik.http.routers.nc.entrypoints=https
      - traefik.http.routers.nc.tls.certresolver=default
      - traefik.serversTransport.forwardingTimeouts.dialTimeout=0s
      - traefik.http.services.nc.loadbalancer.server.port=80


  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: unless-stopped

    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

    volumes:
      - /ssd/app/mariadb/data:/var/lib/mysql

    networks:
      - db

    labels:
      - traefik.enable=false


  gitea:
    container_name: gitea
    image: gitea/gitea:latest
    restart: unless-stopped

    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__SERVICE__DISABLE_REGISTRATION=true
      - GITEA__MIGRATIONS__ALLOW_LOCALNETWORKS=true
      - GITEA__INDEXER__REPO_INDEXER_ENABLED=true
      - GITEA__WEBHOOK__ALLOWED_HOST_LIST=*.{{domain}}

    volumes:
      - /ssd/app/gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

    networks:
      - web

    ports:
      - "1108:22"

    labels:
      - traefik.enable=true
      - traefik.http.routers.gt.rule=Host(`gt.{{ domain }}`)
      - traefik.http.routers.gt.entrypoints=https
      - traefik.http.routers.gt.tls.certresolver=default
      - traefik.http.services.gt.loadbalancer.server.port=80


  drone:
    container_name: drone
    image: drone/drone:2
    restart: unless-stopped

    volumes:
    - /ssd/app/drone:/data

    networks:
      - web
      - drone

    environment:
    - DRONE_GITEA_SERVER=https://gt.{{ domain }}
    - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
    - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
    - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
    - DRONE_SERVER_HOST=dr.{{ domain }}
    - DRONE_SERVER_PROTO=https
    - DRONE_DATADOG_ENABLED=false

    labels:
      - traefik.enable=true
      - traefik.http.routers.dr.rule=Host(`dr.{{ domain }}`)
      - traefik.http.routers.dr.entrypoints=https
      - traefik.http.routers.dr.tls.certresolver=default
      - traefik.http.services.dr.loadbalancer.server.port=80


  runner:
    container_name: runner
    restart: unless-stopped
    image: drone/drone-runner-docker:1

    volumes:
    - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - drone

    environment:
    - DRONE_RPC_PROTO=http
    - DRONE_RPC_HOST=drone
    - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
    - DRONE_RUNNER_CAPACITY=2
    - DRONE_RUNNER_NAME=roger-bannister


  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto
    restart: unless-stopped

    networks:
      - mqtt

    volumes:
      - /ssd/app/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

    labels:
      - traefik.enable=false


  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped

    volumes:
      - /ssd/app/zigbee2mqtt:/app/data

    devices:
      - /dev/ttyUSB0

    networks:
      - web
      - mqtt

    environment:
      - TZ={{ timezone }}

    labels:
      - traefik.enable=true
      - traefik.http.routers.zb.rule=Host(`zb.{{ domain }}`)
      - traefik.http.routers.zb.entrypoints=https
      - traefik.http.routers.zb.tls.certresolver=default
      - traefik.http.services.zb.loadbalancer.server.port=8080


  homeassistant:
    container_name: homeassistant
    image: homeassistant/home-assistant:latest
    restart: unless-stopped

    volumes:
      - /ssd/app/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro

    networks:
      - web
      - mqtt
      - db

    ports:
      - 1400:1400
      - 21064:21064 # HomeKit

    labels:
      - traefik.enable=true
      - traefik.http.routers.ha.rule=Host(`ha.{{ domain }}`)
      - traefik.http.routers.ha.entrypoints=https
      - traefik.http.routers.ha.tls.certresolver=default
      - traefik.http.services.ha.loadbalancer.server.port=8123

  nodered:
    container_name: nodered
    image: nodered/node-red
    restart: unless-stopped
    user: root

    volumes:
      - /ssd/app/nodered:/data
      - /etc/localtime:/etc/localtime:ro

    networks:
      - web
      - mqtt

    environment:
      - TZ={{ timezone }}

    labels:
      - traefik.enable=true
      - traefik.http.routers.nr.rule=Host(`nr.{{ domain }}`)
      - traefik.http.routers.nr.entrypoints=https
      - traefik.http.routers.nr.tls.certresolver=default
      - traefik.http.services.nr.loadbalancer.server.port=1880


  cyberchef:
    container_name: cyberchef
    image: mpepping/cyberchef
    restart: unless-stopped

    networks:
      - web

    environment:
      - TZ={{ timezone }}

    labels:
      - traefik.enable=true
      - traefik.http.routers.cc.rule=Host(`cc.{{ domain }}`)
      - traefik.http.routers.cc.entrypoints=https
      - traefik.http.routers.cc.tls.certresolver=default
      - traefik.http.services.cc.loadbalancer.server.port=8000


  octoprint:
    container_name: octoprint
    image: octoprint/octoprint
    restart: unless-stopped

    devices:
     - /dev/ttyACM0:/dev/ttyACM0
     - /dev/video0:/dev/video0
    
    volumes:
    - /ssd/app/octoprint:/octoprint

    networks:
      - web

    environment:
      - ENABLE_MJPG_STREAMER=true

    labels:
      - traefik.enable=true
      - traefik.http.routers.op.rule=Host(`op.{{ domain }}`)
      - traefik.http.routers.op.entrypoints=https
      - traefik.http.routers.op.tls.certresolver=default
      - traefik.http.services.op.loadbalancer.server.port=80


{{ private_apps }}